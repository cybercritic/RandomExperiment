//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Random_Experiment_WPF.MemeQueenService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UploadData", Namespace="http://schemas.datacontract.org/2004/07/Meme_Queen_Server.WCF")]
    [System.SerializableAttribute()]
    public partial class UploadData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string extField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.IO.Stream myStreamField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passwordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ext {
            get {
                return this.extField;
            }
            set {
                if ((object.ReferenceEquals(this.extField, value) != true)) {
                    this.extField = value;
                    this.RaisePropertyChanged("ext");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.IO.Stream myStream {
            get {
                return this.myStreamField;
            }
            set {
                if ((object.ReferenceEquals(this.myStreamField, value) != true)) {
                    this.myStreamField = value;
                    this.RaisePropertyChanged("myStream");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="MemeQueenService.IMemeQueen")]
    public interface IMemeQueen {
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IMemeQueen/GetToken", ReplyAction="urn:IMemeQueen/GetTokenResponse")]
        string GetToken();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:IMemeQueen/GetToken", ReplyAction="urn:IMemeQueen/GetTokenResponse")]
        System.IAsyncResult BeginGetToken(System.AsyncCallback callback, object asyncState);
        
        string EndGetToken(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IMemeQueen/GetMemes", ReplyAction="urn:IMemeQueen/GetMemesResponse")]
        System.Collections.Generic.List<System.IO.Stream> GetMemes(string token);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:IMemeQueen/GetMemes", ReplyAction="urn:IMemeQueen/GetMemesResponse")]
        System.IAsyncResult BeginGetMemes(string token, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<System.IO.Stream> EndGetMemes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="urn:IMemeQueen/UploadMeme", ReplyAction="urn:IMemeQueen/UploadMemeResponse")]
        string UploadMeme(Random_Experiment_WPF.MemeQueenService.UploadData data);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:IMemeQueen/UploadMeme", ReplyAction="urn:IMemeQueen/UploadMemeResponse")]
        System.IAsyncResult BeginUploadMeme(Random_Experiment_WPF.MemeQueenService.UploadData data, System.AsyncCallback callback, object asyncState);
        
        string EndUploadMeme(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMemeQueenChannel : Random_Experiment_WPF.MemeQueenService.IMemeQueen, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMemesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMemesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<System.IO.Stream> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<System.IO.Stream>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UploadMemeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UploadMemeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MemeQueenClient : System.ServiceModel.ClientBase<Random_Experiment_WPF.MemeQueenService.IMemeQueen>, Random_Experiment_WPF.MemeQueenService.IMemeQueen {
        
        private BeginOperationDelegate onBeginGetTokenDelegate;
        
        private EndOperationDelegate onEndGetTokenDelegate;
        
        private System.Threading.SendOrPostCallback onGetTokenCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMemesDelegate;
        
        private EndOperationDelegate onEndGetMemesDelegate;
        
        private System.Threading.SendOrPostCallback onGetMemesCompletedDelegate;
        
        private BeginOperationDelegate onBeginUploadMemeDelegate;
        
        private EndOperationDelegate onEndUploadMemeDelegate;
        
        private System.Threading.SendOrPostCallback onUploadMemeCompletedDelegate;
        
        public MemeQueenClient() {
        }
        
        public MemeQueenClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MemeQueenClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MemeQueenClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MemeQueenClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetTokenCompletedEventArgs> GetTokenCompleted;
        
        public event System.EventHandler<GetMemesCompletedEventArgs> GetMemesCompleted;
        
        public event System.EventHandler<UploadMemeCompletedEventArgs> UploadMemeCompleted;
        
        public string GetToken() {
            return base.Channel.GetToken();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetToken(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetToken(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetToken(System.IAsyncResult result) {
            return base.Channel.EndGetToken(result);
        }
        
        private System.IAsyncResult OnBeginGetToken(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginGetToken(callback, asyncState);
        }
        
        private object[] OnEndGetToken(System.IAsyncResult result) {
            string retVal = this.EndGetToken(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTokenCompleted(object state) {
            if ((this.GetTokenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTokenCompleted(this, new GetTokenCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTokenAsync() {
            this.GetTokenAsync(null);
        }
        
        public void GetTokenAsync(object userState) {
            if ((this.onBeginGetTokenDelegate == null)) {
                this.onBeginGetTokenDelegate = new BeginOperationDelegate(this.OnBeginGetToken);
            }
            if ((this.onEndGetTokenDelegate == null)) {
                this.onEndGetTokenDelegate = new EndOperationDelegate(this.OnEndGetToken);
            }
            if ((this.onGetTokenCompletedDelegate == null)) {
                this.onGetTokenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTokenCompleted);
            }
            base.InvokeAsync(this.onBeginGetTokenDelegate, null, this.onEndGetTokenDelegate, this.onGetTokenCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.List<System.IO.Stream> GetMemes(string token) {
            return base.Channel.GetMemes(token);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMemes(string token, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMemes(token, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.List<System.IO.Stream> EndGetMemes(System.IAsyncResult result) {
            return base.Channel.EndGetMemes(result);
        }
        
        private System.IAsyncResult OnBeginGetMemes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string token = ((string)(inValues[0]));
            return this.BeginGetMemes(token, callback, asyncState);
        }
        
        private object[] OnEndGetMemes(System.IAsyncResult result) {
            System.Collections.Generic.List<System.IO.Stream> retVal = this.EndGetMemes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMemesCompleted(object state) {
            if ((this.GetMemesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMemesCompleted(this, new GetMemesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMemesAsync(string token) {
            this.GetMemesAsync(token, null);
        }
        
        public void GetMemesAsync(string token, object userState) {
            if ((this.onBeginGetMemesDelegate == null)) {
                this.onBeginGetMemesDelegate = new BeginOperationDelegate(this.OnBeginGetMemes);
            }
            if ((this.onEndGetMemesDelegate == null)) {
                this.onEndGetMemesDelegate = new EndOperationDelegate(this.OnEndGetMemes);
            }
            if ((this.onGetMemesCompletedDelegate == null)) {
                this.onGetMemesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMemesCompleted);
            }
            base.InvokeAsync(this.onBeginGetMemesDelegate, new object[] {
                        token}, this.onEndGetMemesDelegate, this.onGetMemesCompletedDelegate, userState);
        }
        
        public string UploadMeme(Random_Experiment_WPF.MemeQueenService.UploadData data) {
            return base.Channel.UploadMeme(data);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUploadMeme(Random_Experiment_WPF.MemeQueenService.UploadData data, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUploadMeme(data, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndUploadMeme(System.IAsyncResult result) {
            return base.Channel.EndUploadMeme(result);
        }
        
        private System.IAsyncResult OnBeginUploadMeme(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Random_Experiment_WPF.MemeQueenService.UploadData data = ((Random_Experiment_WPF.MemeQueenService.UploadData)(inValues[0]));
            return this.BeginUploadMeme(data, callback, asyncState);
        }
        
        private object[] OnEndUploadMeme(System.IAsyncResult result) {
            string retVal = this.EndUploadMeme(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUploadMemeCompleted(object state) {
            if ((this.UploadMemeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UploadMemeCompleted(this, new UploadMemeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UploadMemeAsync(Random_Experiment_WPF.MemeQueenService.UploadData data) {
            this.UploadMemeAsync(data, null);
        }
        
        public void UploadMemeAsync(Random_Experiment_WPF.MemeQueenService.UploadData data, object userState) {
            if ((this.onBeginUploadMemeDelegate == null)) {
                this.onBeginUploadMemeDelegate = new BeginOperationDelegate(this.OnBeginUploadMeme);
            }
            if ((this.onEndUploadMemeDelegate == null)) {
                this.onEndUploadMemeDelegate = new EndOperationDelegate(this.OnEndUploadMeme);
            }
            if ((this.onUploadMemeCompletedDelegate == null)) {
                this.onUploadMemeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadMemeCompleted);
            }
            base.InvokeAsync(this.onBeginUploadMemeDelegate, new object[] {
                        data}, this.onEndUploadMemeDelegate, this.onUploadMemeCompletedDelegate, userState);
        }
    }
}
